There are images and they are pages of the pdf file.

You must find those nested low level products and other products. This file is kind of instruction like file,
contains data about which product contains with what products/rawMaterials and etc.
Please extract all numbers and text from these images and convert to JSON response.
Cyrillic product names must be OCRed correctly. Pay extra attention to the first 3–4 characters. DO NOT guess or replace letters incorrectly.
Or if they are same but length are different then you can sum them up to one product with total length or like that with other products if logically it's okay.
But if another field is also different then 2 or more products can be summed up.
Images can have Cyrillic symbols. I do not need any other words than JSON response in the response.
The given content may contain vendor (supplier) information and a list of products.
Your task is to extract only the relevant fields and return the data as structured JSON objects.

Ignore any unrelated data.
If there are no relevant data then respond: No relevant data found.
If you couldn't read the file properly or text doesn't exist then respond: No text data found.

Vendor fields to extract (skip missing fields if not found):

name : String
description : String
email : String
district : String
city : String
address : String
contactName : String
deliveryTime : Integer

Product fields to extract (can be multiple products, skip missing fields):
code : String
productName : String
List<ProductType> internalProducts (if some products contain other products then it must be placed inside its internalProducts list)
ProductLevel productLevel
amount : BigDecimal
materialMeasureType : String
warehouse : String

ProductLevel is enum class and its values: LEVEL_1, LEVEL_2, LEVEL_3

UNITS - Ед.изм. - Единица измерения, or шт - штук
WEIGHTED_KILO - кг - килограмм
WEIGHTED_GRAM - г - грамм
VOLUME_L - л - литр
VOLUME_ML - мл - миллилитр
SQUARE_M - м² - квадратный метр
LINEAR_METERS - п.м. - погонные метры
CUBIC_M - м³ - кубический метр
TONS - т - тонна

When creating result use those enums like UNITS or WEIGHTED_KILO or etc, not in this way килограмм or кг.

MANDATORY LOGIC:

There are 3 levels:

LEVEL_1: Raw Materials
LEVEL_2: Detail (must be made ONLY from LEVEL_1)
LEVEL_3: Finished Product (can be made from LEVEL_1 and/or LEVEL_2)

If a product is labeled as LEVEL_2 or LEVEL_3 but has no internal products, demote it to LEVEL_1. Only retain LEVEL_2/LEVEL_3 if internalProducts are present.
If there is no clear description about which product is what level then main product is level 3 and others level 1 and use nested structure.
If it's not level2 or level3 then all products must be nested to higher level products.
I am saying again, if product does not have any internalProducts it's not level3 or level2 it must be downgraded to level1.
If there is no obvious data about product has internalProducts then it does not have internalProducts then it's level1 product.

You must logically detect which items are actual products. Ignore rows or items that are clearly not products (e.g., headers, metadata, or totals).

If there are more than one measureType then you must use only one and set to materialMeasureType field.
If materialMeasureType is meter or kilogram then amount can be used as for help like:
materialMeasureType -> meter. amount -> 30.5. Then product is 30.5 meter.
materialMeasureType -> kilogram. amount -> 13. Then product is 13 kilogram.
Sum products amounts if names are identical, and/or they differ by length but can be summed up by their other measureType (like weight). Weight * amount, or length * amount.
Sum up products weight and display it.
If products core name can be used and only by weight/length could be used as measureType then do it like that.
Group the products by productName only. Names can differ with some space or dash position but you must see them as same products.
Ignore the code field when grouping or summing. If multiple entries have the same productName, sum their amount values regardless of the code.

Do not change names. Only merge if logical grouping by length/amount makes sense.
When merging names do not add anything from yourself only use from image/file data.

In the final Products list, return ONLY valid products — no extra image data, no unrelated rows, no totals.

Do NOT include any extra fields not mentioned above.
Return only the raw JSON, without any Markdown formatting or explanation.

Response which I don't want:

```json
{
    "key1": "value1",
    "key2": [
        {
            "nestedKey": "nestedValue"
        }
    ]
}
```

Response I want:

{
    "key1": "value1",
    "key2": [
        {
            "nestedKey": "nestedValue"
        }
    ]
}