=== PDF 1: Main products information ===
=== PDF 2: Nested product details information ===
I am giving 2 pdf files data, and they start like that in the above.
Below more information about structure of the data.

There are images, but they are actually pages of the pdf file.
Order: Top left, top right, bottom left, bottom right.
Images will be named or sent in such a way that the order is clearly: top left, top right, bottom left, bottom right. Treat these 4 as a grid to reconstruct the full PDF page layout.
Don't respond with like top left or top right, but create one whole page of information.
Stick them together. Please extract all numbers and text from these images and convert to JSON response.
Cyrillic product names must be OCRed correctly. Pay extra attention to the first 3–4 characters. DO NOT guess or replace letters incorrectly.
Or if they are same but length are different then add that length field to name also.
Logic is like this: if products name same but there are multiple, then attach their unique fields or specifications for that product.
Images can have Cyrillic symbols. I do not need any other words than JSON response in the response.
The given content may contain vendor (supplier) information and a list of products.
Your task is to extract only the relevant fields and return the data as structured JSON objects.

Ignore any unrelated data.
If there are no relevant data then respond: No relevant data found.
If you couldn't read the file properly or text doesn't exist then respond: No text data found.

Vendor fields to extract (skip missing fields if not found):

name : String
description : String
email : String
district : String
city : String
address : String
contactName : String
deliveryTime : Integer

Product fields to extract (can be multiple products, skip missing fields):
code : String
productName : String
List<ProductType> internalProducts (if some products contain other products then it must be placed inside its internalProducts list)
ProductLevel productLevel
amount : BigDecimal
materialMeasureType : String
warehouse : String

ProductLevel is enum class and its values: LEVEL_1, LEVEL_2, LEVEL_3

UNITS - Ед.изм. - Единица измерения, or шт - штук
WEIGHTED_KILO - кг - килограмм
WEIGHTED_GRAM - г - грамм
VOLUME_L - л - литр
VOLUME_ML - мл - миллилитр
SQUARE_M - м² - квадратный метр
LINEAR_METERS - п.м. - погонные метры
CUBIC_M - м³ - кубический метр
TONS - т - тонна

When creating result use those enums like UNITS or WEIGHTED_KILO or etc, not in this way килограмм or кг.

MANDATORY LOGIC:

There are 3 levels:

LEVEL_1: Raw Materials
LEVEL_2: Detail (must be made ONLY from LEVEL_1)
LEVEL_3: Finished Product (can be made from LEVEL_1 and/or LEVEL_2)

If a product is labeled as LEVEL_2 or LEVEL_3 but has no internal products, demote it to LEVEL_1. Only retain LEVEL_2/LEVEL_3 if internalProducts are present.
Important rule 2nd pdf file data does not contain LEVEL_3 but only LEVEL_2, and it's nested LEVEL_1 product info.
1st pdf contains real must be extracted Products data but in it's data there is no info about LEVEL_2 nested products.
You get that information from 2nd pdf data and create whole products list from LEVEL_3, LEVEL_2 and LEVEL_1.
Only 1st pdf data has LEVEL_3 and maybe only one LEVEL_3 Product.
1st pdf contains as I said real products and 2nd pdf is like handbook, says these LEVEL_2 products contains of these LEVEL_1 products.
2nd pdf can have more products than needed because it's handbook, take info for what products you need from 1st pdf.
If there is no clear description about which product is what level then main product is level 3 and others level 1 and use nested structure.
If it's not level2 or level3 then all products must be nested to higher level products.
I am saying again, if product does not have any internalProducts it's not level3 or level2 it must be downgraded to level1.
If there is no obvious data about product has internalProducts then it does not have internalProducts then it's level1 product.
If you see logically it's LEVEL_2 and LEVEL_1 but there is not much info about LEVEL_3 then response as it is without LEVEL_3.

You must logically detect which items are actual products. Ignore rows or items that are clearly not products (e.g., headers, metadata, or totals).

If there are length and weight (or other fields), always prioritize length, and set materialMeasureType to UNITS.
You must attach length and steel grade to product name to ensure uniqueness.
Never use weight as materialMeasureType if length is present.
Weight should only be used for internal data or total calculation, not for materialMeasureType.
If possible use length as measureType but if you must add to name to have unique product name then use UNITS.
If they are not possible then use weight as measureType.
Names can differ with some space or dash position, but you must see them as same products.

In the final Products list, return ONLY valid products — no extra image data, no unrelated rows, no totals.

Do NOT include any extra fields not mentioned above.
Return only the raw JSON, without any Markdown formatting or explanation.

Response which I don't want:

```json
{
    "key1": "value1",
    "key2": [
        {
            "nestedKey": "nestedValue"
        }
    ]
}
```

Response I want:

{
    "key1": "value1",
    "key2": [
        {
            "nestedKey": "nestedValue"
        }
    ]
}